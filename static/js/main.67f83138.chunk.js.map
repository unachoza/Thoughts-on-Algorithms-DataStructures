{"version":3,"sources":["Components/AlgoSingle.tsx","Components/Main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AlgoSingle","className","style","textAlign","Main","Component","App","href","color","textDecoration","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNA4CeA,EAzCc,WAC3B,OACE,mCACE,sBAAKC,UAAU,YAAf,6CAEE,mBAAGA,UAAU,cAAb,mYAkBA,oBAAGA,UAAU,aAAb,gDAEE,qBAAIC,MAAO,CAAEC,UAAW,QAAxB,yBAEE,6GACA,2DACA,qEACA,yEACA,mEACA,yEACA,6DCoBGC,E,uKAbX,OACE,qCACE,4CACA,sBAAKH,UAAU,OAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,c,GAzBSI,aCJJC,EAhBO,WACpB,OACE,mCACE,qBAAKL,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKA,UAAU,WAAf,iCACA,cAAC,EAAD,IACA,mBAAGM,KAAK,kCAAkCL,MAAO,CAAEM,MAAO,QAASC,eAAgB,QAAnF,kCCGKC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.67f83138.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\n\nconst AlgoSingle: React.FC = () => {\n  return (\n    <>\n      <div className=\"Container\">\n        Algorithms Name: Merge Two Trees\n        <p className=\"algo-single\">\n          Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two\n          trees are overlapped while the others are not. You need to merge them into a new binary tree. The merge rule\n          is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT\n          null node will be used as the node of new tree.\n        </p>\n        {/* * Definition for a binary tree node.\n         * function TreeNode(val, left, right) {\n         *     this.val = (val===undefined ? 0 : val)\n         *     this.left = (left===undefined ? null : left)\n         *     this.right = (right===undefined ? null : right)\n         * }\n         */\n        /**\n         * @param {TreeNode} t1\n         * @param {TreeNode} t2\n         * @return {TreeNode}\n         */}\n        <p className=\"psudeocode\">\n          const mergeTrees = function(t1, t2)\n          <ul style={{ textAlign: 'left' }}>\n            Pseudocode::\n            <li>check arguments to make sure there are two and they both are typeof numbers</li>\n            <li> create new tree variable</li>\n            <li>create tree data structure entirely</li>\n            <li>need to traverse two trees depth first;</li>\n            <li>every node stop and combine value</li>\n            <li>!two nodes? add single node to new tree</li>\n            <li>return new true</li>\n          </ul>\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default AlgoSingle;\n","import React, { Component } from 'react';\nimport '../App.css';\nimport AlgoSingle from './AlgoSingle';\n\n// export interface queryParams extends dropdownState{\n//   query: string;\n//   stars: string;\n//   fork: boolean;\n//   loading: boolean;\n//   license: string\n// }\n\n// export interface State extends queryParams {\n//   isLoaded: boolean;\n//   data?: RepoItem[];\n//   name: string;\n//   owner: string;\n//   html_url: string;\n//   description: string;\n//   invalidInput: boolean;\n//   licenseList: [],\n//   icon: string\n// }\n//<{}, State>\nclass Main extends Component<{}> {\n  // state: any = {\n  //   isLoaded: false,\n  //   loading: false,\n  //   data: [],\n  //   fork: false,\n  //   query: \"\",\n  //   stars: \"\",\n  //   license: \"\",\n  //   name: \"\",\n  //   owner: \"\",\n  //   html_url: \"\",\n  //   description: \"\",\n  //   invalidInput: false,\n  //   licenseList: [\"\", \"MIT\", \"ISC\", \"apache-2.0\", \"gpl\"],\n  //   selectedLicense: \"\",\n  //   icon: \"\"\n  // };\n  render() {\n    return (\n      <>\n        <div>Show list</div>\n        <div className=\"flex\">\n          <AlgoSingle />\n          <AlgoSingle />\n          <AlgoSingle />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport Main from './Components/Main';\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"App-link\">Algorithms Practice</div>\n          <Main />\n          <a href=\"https://arianna-dev.vercel.app/\" style={{ color: 'white', textDecoration: 'none' }}>\n            Back to home\n          </a>\n        </header>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}